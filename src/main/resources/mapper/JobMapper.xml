<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ea_system.mapper.JobMapper">
  <resultMap id="BaseResultMap" type="com.example.ea_system.bean.Job">
    <id column="jobId" jdbcType="INTEGER" property="jobid" />
    <result column="companyId" jdbcType="INTEGER" property="companyid" />
    <result column="jobName" jdbcType="VARCHAR" property="jobname" />
    <result column="requirement" jdbcType="VARCHAR" property="requirement" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="salary" jdbcType="DOUBLE" property="salary" />
    <result column="otherPay" jdbcType="VARCHAR" property="otherpay" />
    <result column="closeDate" jdbcType="TIMESTAMP" property="closedate" />
    <result column="described" jdbcType="VARCHAR" property="described" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    jobId, companyId, jobName, requirement, address, number, salary, otherPay, closeDate, 
    described
  </sql>
  <select id="selectByExample" parameterType="com.example.ea_system.bean.JobExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from job_info
    where jobId = #{jobid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job_info
    where jobId = #{jobid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.ea_system.bean.JobExample">
    delete from job_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.ea_system.bean.Job">
    insert into job_info (jobId, companyId, jobName, 
      requirement, address, number, 
      salary, otherPay, closeDate, 
      described)
    values (#{jobid,jdbcType=INTEGER}, #{companyid,jdbcType=INTEGER}, #{jobname,jdbcType=VARCHAR}, 
      #{requirement,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER}, 
      #{salary,jdbcType=DOUBLE}, #{otherpay,jdbcType=VARCHAR}, #{closedate,jdbcType=TIMESTAMP}, 
      #{described,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.ea_system.bean.Job">
    insert into job_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobid != null">
        jobId,
      </if>
      <if test="companyid != null">
        companyId,
      </if>
      <if test="jobname != null">
        jobName,
      </if>
      <if test="requirement != null">
        requirement,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="otherpay != null">
        otherPay,
      </if>
      <if test="closedate != null">
        closeDate,
      </if>
      <if test="described != null">
        described,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobid != null">
        #{jobid,jdbcType=INTEGER},
      </if>
      <if test="companyid != null">
        #{companyid,jdbcType=INTEGER},
      </if>
      <if test="jobname != null">
        #{jobname,jdbcType=VARCHAR},
      </if>
      <if test="requirement != null">
        #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=DOUBLE},
      </if>
      <if test="otherpay != null">
        #{otherpay,jdbcType=VARCHAR},
      </if>
      <if test="closedate != null">
        #{closedate,jdbcType=TIMESTAMP},
      </if>
      <if test="described != null">
        #{described,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.ea_system.bean.JobExample" resultType="java.lang.Long">
    select count(*) from job_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update job_info
    <set>
      <if test="record.jobid != null">
        jobId = #{record.jobid,jdbcType=INTEGER},
      </if>
      <if test="record.companyid != null">
        companyId = #{record.companyid,jdbcType=INTEGER},
      </if>
      <if test="record.jobname != null">
        jobName = #{record.jobname,jdbcType=VARCHAR},
      </if>
      <if test="record.requirement != null">
        requirement = #{record.requirement,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=DOUBLE},
      </if>
      <if test="record.otherpay != null">
        otherPay = #{record.otherpay,jdbcType=VARCHAR},
      </if>
      <if test="record.closedate != null">
        closeDate = #{record.closedate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.described != null">
        described = #{record.described,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update job_info
    set jobId = #{record.jobid,jdbcType=INTEGER},
      companyId = #{record.companyid,jdbcType=INTEGER},
      jobName = #{record.jobname,jdbcType=VARCHAR},
      requirement = #{record.requirement,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      number = #{record.number,jdbcType=INTEGER},
      salary = #{record.salary,jdbcType=DOUBLE},
      otherPay = #{record.otherpay,jdbcType=VARCHAR},
      closeDate = #{record.closedate,jdbcType=TIMESTAMP},
      described = #{record.described,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.ea_system.bean.Job">
    update job_info
    <set>
      <if test="companyid != null">
        companyId = #{companyid,jdbcType=INTEGER},
      </if>
      <if test="jobname != null">
        jobName = #{jobname,jdbcType=VARCHAR},
      </if>
      <if test="requirement != null">
        requirement = #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=DOUBLE},
      </if>
      <if test="otherpay != null">
        otherPay = #{otherpay,jdbcType=VARCHAR},
      </if>
      <if test="closedate != null">
        closeDate = #{closedate,jdbcType=TIMESTAMP},
      </if>
      <if test="described != null">
        described = #{described,jdbcType=VARCHAR},
      </if>
    </set>
    where jobId = #{jobid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.ea_system.bean.Job">
    update job_info
    set companyId = #{companyid,jdbcType=INTEGER},
      jobName = #{jobname,jdbcType=VARCHAR},
      requirement = #{requirement,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      salary = #{salary,jdbcType=DOUBLE},
      otherPay = #{otherpay,jdbcType=VARCHAR},
      closeDate = #{closedate,jdbcType=TIMESTAMP},
      described = #{described,jdbcType=VARCHAR}
    where jobId = #{jobid,jdbcType=INTEGER}
  </update>
</mapper>